{"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"vlWojX0BMi9W"},"outputs":[],"source":["from google.colab import drive\n","drive.mount('/content/drive')\n","%cd /content/drive/MyDrive/ZTM/\n","%cd 'Business Data  Analytics with Python'/'Data Visualization'/"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":452},"executionInfo":{"elapsed":3174,"status":"ok","timestamp":1717467240217,"user":{"displayName":"Vivian Kaun","userId":"17909774357863810829"},"user_tz":420},"id":"O82ag-OLtrLA","outputId":"3e4ac3a6-a7be-49f2-dbd2-5bd7c366506c"},"outputs":[{"data":{"application/vnd.google.colaboratory.intrinsic+json":{"summary":"{\n  \"name\": \"df\",\n  \"rows\": 5587,\n  \"fields\": [\n    {\n      \"column\": \"job_ID\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 61890886,\n        \"min\": 141921619,\n        \"max\": 3477823471,\n        \"num_unique_values\": 5587,\n        \"samples\": [\n          3476299025,\n          3474479510,\n          3474306107\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"designation\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 84,\n        \"samples\": [\n          \"Professor\",\n          \"Data Analyst\",\n          \"Robotics\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"company_id\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 696.0764681974716,\n        \"min\": 1.0,\n        \"max\": 2494.0,\n        \"num_unique_values\": 2321,\n        \"samples\": [\n          1610.0,\n          336.0,\n          1042.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"name\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2321,\n        \"samples\": [\n          \"PlaceUp\",\n          \"Builder.ai\",\n          \"Inferenz\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"work_type\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"Remote\",\n          \"On-site\",\n          \"Hybrid\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"involvement\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 7,\n        \"samples\": [\n          \"Full-time\",\n          \"Contract\",\n          \"Associate\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"employees_count\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3512,\n        \"min\": 1,\n        \"max\": 10001,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          1,\n          11,\n          1001\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"total_applicants\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 52,\n        \"min\": 0,\n        \"max\": 200,\n        \"num_unique_values\": 190,\n        \"samples\": [\n          153,\n          197,\n          114\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"linkedin_followers\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2232505.547918738,\n        \"min\": 3.0,\n        \"max\": 13136792.0,\n        \"num_unique_values\": 2938,\n        \"samples\": [\n          161.0,\n          989601.0,\n          589.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"job_details\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 4349,\n        \"samples\": [\n          \"About the job Exp 6 to 10 YearsLocation: Anywhere in IndiaCandidates can join latest by 30 Days only JD: Developer L4\\u00b7 At least 9-10 years of experience in IBM API Connect (Mandatory) and IBM DataPower (Mandatory)\\u00b7 Extensive experience designing and developing RESTful APIs and SOAP webservices.\\u00b7 Broad knowledge of web security standards relating to APIs (OAuth, SSL, CORS, JWT, etc.)\\u00b7 And knowledge of Azure and Azure Kubernetes is preferred JD: Developer L3\\u00b7 At least 6-7 years of experience in IBM API Connect (Mandatory) and IBM DataPower (Mandatory)\\u00b7 Extensive experience designing and developing RESTful APIs and SOAP webservices.\\u00b7 Broad knowledge of web security standards relating to APIs (OAuth, SSL, CORS, JWT, etc.)\\u00b7 And knowledge of Azure and Azure Kubernetes is preferred\",\n          \"About the job Greetings from TCS! Job Title: Java DeveloperLocation: Bangalore/Hyderabad/NCRExperience Range: 5+ years Job DescriptionTCS has always been in the spotlight for being adept in \\u201cthe next big technologies\\u201d. What we can offer you is a space to explore varied technologies and quench your techie soul. What we are looking forCore Java, MVC Framework (Struts, Springs), REST Web servicesMongoDB, Micro services, Elastic Search, Kibana, GIT, Jeera, SQLHand-on experience on J2EE & Web Technologies, Agile frameworkGood understanding on fundamentals of development Minimum Qualification:15 years of full-time education Interested candidates, please share your resume to nazima.shaik@tcs.com\",\n          \"About the job Job Title:Consultant/Sr Consultant \\u2013 Data EngineerExperience - 4-8yearsWe are looking for immediate joiners onlyInterested candidates can share their resume at Babita.arora@centricconsulting.com Job Summary: The experienced Data Engineer is a member of the project team who takes responsibility for implementing parts of the system architecture using best practices in an agile development environment. This will include coding, unit testing, using design patterns, learning new technologies, and becoming an expert in one part of the system. Primary Responsibilities: Job descriptionShould have 4+yrs experience in building and operationalizing large scale enterprise data solutionsShould have development experience using Azure Data Factory, Azure Databricks, Azure Data Lake, Azure Blob etcShould have experience in Datawarehouse implementationShould have experience in migrating on-premise data warehouses to data platforms on AZURE cloud.Should have designing and implementing data engineering, ingestion and transformation functions using SQL and PySparkShould have knowledge on Capacity Planning and Performance Tuning on Azure SparkExposure across all the SDLC process, including testing and deploymentExperience in relational and dimensional modelling, including big data technologiesExperience of working in secured Azure environments using Azure Key Vaults Education:Bachelor\\u2019s Degree required from college or University with >65% Academic score\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"details_id\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1687,\n        \"min\": 1,\n        \"max\": 5843,\n        \"num_unique_values\": 5587,\n        \"samples\": [\n          5170,\n          3758,\n          3597\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"industry\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 103,\n        \"samples\": [\n          \" Spectator Sports\",\n          \" Medical Equipment Manufacturing\",\n          \" Appliances Electrical and Electronics Manufacturing\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"level\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 7,\n        \"samples\": [\n          \" Associate\",\n          \" Mid-Senior level\",\n          \" Executive\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"City\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 123,\n        \"samples\": [\n          \"Chengannur\",\n          \"Guindy\",\n          \"Greater Delhi Area\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"State\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 27,\n        \"samples\": [\n          \"Maharashtra\",\n          \"Chandigarh\",\n          \"Kerala\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}","type":"dataframe","variable_name":"df"},"text/html":["\n","  <div id=\"df-a02c2c10-a121-4a26-b03a-adb6253d8e31\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>job_ID</th>\n","      <th>designation</th>\n","      <th>company_id</th>\n","      <th>name</th>\n","      <th>work_type</th>\n","      <th>involvement</th>\n","      <th>employees_count</th>\n","      <th>total_applicants</th>\n","      <th>linkedin_followers</th>\n","      <th>job_details</th>\n","      <th>details_id</th>\n","      <th>industry</th>\n","      <th>level</th>\n","      <th>City</th>\n","      <th>State</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>3471657636</td>\n","      <td>Data Analyst</td>\n","      <td>524.0</td>\n","      <td>Crossover</td>\n","      <td>Remote</td>\n","      <td>Full-time</td>\n","      <td>1001</td>\n","      <td>200</td>\n","      <td>5.395547e+06</td>\n","      <td>About the job Crossover is the world's #1 sour...</td>\n","      <td>2697</td>\n","      <td>IT Services and IT Consulting</td>\n","      <td>Associate</td>\n","      <td>Delhi</td>\n","      <td>Delhi</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>3471669068</td>\n","      <td>Data Analyst</td>\n","      <td>524.0</td>\n","      <td>Crossover</td>\n","      <td>Remote</td>\n","      <td>Full-time</td>\n","      <td>1001</td>\n","      <td>184</td>\n","      <td>5.395547e+06</td>\n","      <td>About the job Crossover is the world's #1 sour...</td>\n","      <td>2724</td>\n","      <td>IT Services and IT Consulting</td>\n","      <td>Associate</td>\n","      <td>New Delhi</td>\n","      <td>Delhi</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>3474349934</td>\n","      <td>Data Analyst</td>\n","      <td>2242.0</td>\n","      <td>Uplers</td>\n","      <td>Remote</td>\n","      <td>Full-time</td>\n","      <td>1001</td>\n","      <td>200</td>\n","      <td>9.821152e+05</td>\n","      <td>About the job Profile: ML EngineersExperience:...</td>\n","      <td>3668</td>\n","      <td>IT Services and IT Consulting</td>\n","      <td>Mid-Senior level</td>\n","      <td>Greater Bengaluru Area</td>\n","      <td>Karnataka</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>3472816027</td>\n","      <td>Data Analyst</td>\n","      <td>1553.0</td>\n","      <td>PVAR SERVICES</td>\n","      <td>On-site</td>\n","      <td>Full-time</td>\n","      <td>1</td>\n","      <td>200</td>\n","      <td>2.094000e+03</td>\n","      <td>About the job Designation: Data AnalystLocatio...</td>\n","      <td>3083</td>\n","      <td>Not Avilable</td>\n","      <td>Not Avilable</td>\n","      <td>Gurugram</td>\n","      <td>Haryana</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>3473311511</td>\n","      <td>Data Analyst</td>\n","      <td>2147.0</td>\n","      <td>Timeline Freight Brokers</td>\n","      <td>On-site</td>\n","      <td>Full-time</td>\n","      <td>1</td>\n","      <td>8</td>\n","      <td>9.821152e+05</td>\n","      <td>About the job The ideal candidate will use the...</td>\n","      <td>3359</td>\n","      <td>Not Avilable</td>\n","      <td>Not Avilable</td>\n","      <td>Mohali district</td>\n","      <td>North West</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-a02c2c10-a121-4a26-b03a-adb6253d8e31')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-a02c2c10-a121-4a26-b03a-adb6253d8e31 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-a02c2c10-a121-4a26-b03a-adb6253d8e31');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-07d9d0ec-9fec-4cba-aa28-35b1925c8e09\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-07d9d0ec-9fec-4cba-aa28-35b1925c8e09')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-07d9d0ec-9fec-4cba-aa28-35b1925c8e09 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"text/plain":["       job_ID   designation  company_id                      name work_type  \\\n","0  3471657636  Data Analyst       524.0                 Crossover    Remote   \n","1  3471669068  Data Analyst       524.0                 Crossover    Remote   \n","2  3474349934  Data Analyst      2242.0                    Uplers    Remote   \n","3  3472816027  Data Analyst      1553.0             PVAR SERVICES   On-site   \n","4  3473311511  Data Analyst      2147.0  Timeline Freight Brokers   On-site   \n","\n","  involvement  employees_count  total_applicants  linkedin_followers  \\\n","0   Full-time             1001               200        5.395547e+06   \n","1   Full-time             1001               184        5.395547e+06   \n","2   Full-time             1001               200        9.821152e+05   \n","3   Full-time                1               200        2.094000e+03   \n","4   Full-time                1                 8        9.821152e+05   \n","\n","                                         job_details  details_id  \\\n","0  About the job Crossover is the world's #1 sour...        2697   \n","1  About the job Crossover is the world's #1 sour...        2724   \n","2  About the job Profile: ML EngineersExperience:...        3668   \n","3  About the job Designation: Data AnalystLocatio...        3083   \n","4  About the job The ideal candidate will use the...        3359   \n","\n","                         industry              level                    City  \\\n","0   IT Services and IT Consulting          Associate                   Delhi   \n","1   IT Services and IT Consulting          Associate               New Delhi   \n","2   IT Services and IT Consulting   Mid-Senior level  Greater Bengaluru Area   \n","3                    Not Avilable       Not Avilable                Gurugram   \n","4                    Not Avilable       Not Avilable         Mohali district   \n","\n","        State  \n","0       Delhi  \n","1       Delhi  \n","2   Karnataka  \n","3     Haryana  \n","4  North West  "]},"execution_count":2,"metadata":{},"output_type":"execute_result"}],"source":["import statsmodels.api as sm\n","import matplotlib.pyplot as plt\n","import numpy as np\n","import pandas as pd\n","\n","df = pd.read_csv(\"job_cleanData.csv\")\n","\n","df.head()\n","\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":260,"status":"ok","timestamp":1717438564663,"user":{"displayName":"Vivian Kaun","userId":"17909774357863810829"},"user_tz":420},"id":"xFfbptAMUCX1","outputId":"3af7eb87-f1ff-49a3-88ac-ae4ded10b687"},"outputs":[{"data":{"text/plain":["job_ID                0\n","designation           0\n","company_id            0\n","name                  0\n","work_type             0\n","involvement           0\n","employees_count       0\n","total_applicants      0\n","linkedin_followers    0\n","job_details           0\n","details_id            0\n","industry              0\n","level                 0\n","City                  0\n","State                 0\n","dtype: int64"]},"execution_count":9,"metadata":{},"output_type":"execute_result"}],"source":["df.isna().sum()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"VhQBDf7CT7pW"},"outputs":[],"source":["\n","# # Check for NaNs and fill or remove them\n","# # Option 1: Remove rows with NaNs\n","# df.dropna(inplace=True)\n","\n","# # Option 2: Fill NaNs with the mean (or median, mode, etc.)\n","# # df.fillna(df.mean(), inplace=True)\n","\n","# # Check for infinite values and replace them\n","# df.replace([np.inf, -np.inf], np.nan, inplace=True)\n","# df.dropna(inplace=True)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":235,"status":"ok","timestamp":1717438688521,"user":{"displayName":"Vivian Kaun","userId":"17909774357863810829"},"user_tz":420},"id":"1mvb8EocS10s","outputId":"c42df140-fd0e-4bd7-ea44-b9f16e09a4b1"},"outputs":[{"name":"stdout","output_type":"stream","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 5587 entries, 0 to 5586\n","Data columns (total 15 columns):\n"," #   Column              Non-Null Count  Dtype  \n","---  ------              --------------  -----  \n"," 0   job_ID              5587 non-null   int64  \n"," 1   designation         5587 non-null   object \n"," 2   company_id          5587 non-null   float64\n"," 3   name                5587 non-null   object \n"," 4   work_type           5587 non-null   object \n"," 5   involvement         5587 non-null   object \n"," 6   employees_count     5587 non-null   int64  \n"," 7   total_applicants    5587 non-null   int64  \n"," 8   linkedin_followers  5587 non-null   float64\n"," 9   job_details         5587 non-null   object \n"," 10  details_id          5587 non-null   int64  \n"," 11  industry            5587 non-null   object \n"," 12  level               5587 non-null   object \n"," 13  City                5587 non-null   object \n"," 14  State               5587 non-null   object \n","dtypes: float64(2), int64(4), object(9)\n","memory usage: 654.9+ KB\n"]}],"source":["df.info()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"B8Xx6KY4UowB"},"outputs":[],"source":["# bar char\n","# defining  the plot size\n","\n","fig, ax = plt.subplots(figsize=( 15,6))\n","ax.hist(df.employees_count)\n","\n","\n","data = df[['name','total_applicants']].nlargest(20,'total_applicants') .sort_values( by='total_applicants', ascending= True)\n","y_pos = np.arange(len(data['name']))\n","plt.barh(y= y_pos, width =  data.total_applicants)\n","plt.yticks(ticks= y_pos, labels = data['name'] )\n","\n","# Add labels and title\n","plt.xlabel('Total Applicants')\n","plt.title('Top 40 Companies by Total Applicants')\n","ax.legend()\n","plt.show()\n","\n","# # Select top 20 companies by total applicants and sort them in ascending order\n","# data = df.nlargest(40, 'total_applicants').sort_values(by='total_applicants', ascending=True)\n","\n","# # Create horizontal bar chart\n","# fig, ax = plt.subplots(figsize=(12, 8))  # Increase figure size\n","# y_pos = np.arange(len(data['name']))\n","# bars = ax.barh(y=y_pos, width=data['total_applicants'], color='skyblue')\n","\n","# # Add company names as y-axis labels\n","# ax.set_yticks(y_pos)\n","# ax.set_yticklabels(data['name'], fontsize=10)  # Adjust font size for labels\n","\n","# # Add total applicants numbers to the bars\n","# for bar, total in zip(bars, data['total_applicants']):\n","#     plt.text(bar.get_width(), bar.get_y() + bar.get_height()/2, f'{total}', va='center', fontsize=10)\n","\n","\n","# # Adjust layout for better fit\n","# plt.tight_layout()\n","\n","# # Display the plot\n","# plt.show()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":521,"status":"ok","timestamp":1717399121248,"user":{"displayName":"Vivian Kaun","userId":"17909774357863810829"},"user_tz":420},"id":"rqCMzJZ-47UT","outputId":"00cca833-9a30-4dce-87fa-08ddaaed2691"},"outputs":[{"name":"stdout","output_type":"stream","text":["['Remote' 'On-site' 'Hybrid']\n"]}],"source":["df.head()\n","distinct_work = df['work_type'].unique()\n","print(distinct_work )"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":338,"status":"ok","timestamp":1717399124398,"user":{"displayName":"Vivian Kaun","userId":"17909774357863810829"},"user_tz":420},"id":"K3ERuBA15jyM","outputId":"c65e0ef0-3432-4096-b8c9-b064c49c379f"},"outputs":[{"name":"stdout","output_type":"stream","text":["\n","Unique values in 'work_type' column:\n","['Remote' 'On-site' 'Hybrid']\n","\n","Modified DataFrame with NaNs for unmapped values:\n","          job_ID        designation  company_id                       name  \\\n","0     3471657636       Data Analyst       524.0                  Crossover   \n","1     3471669068       Data Analyst       524.0                  Crossover   \n","2     3474349934       Data Analyst      2242.0                     Uplers   \n","3     3472816027       Data Analyst      1553.0              PVAR SERVICES   \n","4     3473311511       Data Analyst      2147.0   Timeline Freight Brokers   \n","...          ...                ...         ...                        ...   \n","5582  3472039871  BackEnd Developer      1527.0           Orion Innovation   \n","5583  3473194471  Software Engineer      2242.0                     Uplers   \n","5584  3461005032   Vue.js Developer      2050.0  Tata Consultancy Services   \n","5585  3474305684      iOS Developer      2242.0                     Uplers   \n","5586  3459352801    Other Developer       106.0                    Akkodis   \n","\n","      work_type involvement  employees_count  total_applicants  \\\n","0             2   Full-time             1001               200   \n","1             2   Full-time             1001               184   \n","2             2   Full-time             1001               200   \n","3             1   Full-time                1               200   \n","4             1   Full-time                1                 8   \n","...         ...         ...              ...               ...   \n","5582          3   Full-time             5001                25   \n","5583          1   Full-time             1001                18   \n","5584          1   Full-time            10001                15   \n","5585          2   Full-time             1001                17   \n","5586          3   Full-time            10001                43   \n","\n","      linkedin_followers                                        job_details  \\\n","0           5.395547e+06  About the job Crossover is the world's #1 sour...   \n","1           5.395547e+06  About the job Crossover is the world's #1 sour...   \n","2           9.821152e+05  About the job Profile: ML EngineersExperience:...   \n","3           2.094000e+03  About the job Designation: Data AnalystLocatio...   \n","4           9.821152e+05  About the job The ideal candidate will use the...   \n","...                  ...                                                ...   \n","5582        9.821152e+05  About the job The ideal candidate will show in...   \n","5583        9.821152e+05  About the job Experience: 4 - 8 yearsProfile: ...   \n","5584        1.192363e+07  About the job Role- Vue js DeveloperExperience...   \n","5585        9.821152e+05  About the job Profile: iOS DeveloperExperience...   \n","5586        1.421090e+06  About the job JD Powertrain Function Developer...   \n","\n","      details_id                        industry              level  \\\n","0           2697   IT Services and IT Consulting          Associate   \n","1           2724   IT Services and IT Consulting          Associate   \n","2           3668   IT Services and IT Consulting   Mid-Senior level   \n","3           3083                    Not Avilable       Not Avilable   \n","4           3359                    Not Avilable       Not Avilable   \n","...          ...                             ...                ...   \n","5582        2865   IT Services and IT Consulting          Associate   \n","5583        3343   IT Services and IT Consulting   Mid-Senior level   \n","5584         344   IT Services and IT Consulting   Mid-Senior level   \n","5585        3594   IT Services and IT Consulting   Mid-Senior level   \n","5586         245   IT Services and IT Consulting   Mid-Senior level   \n","\n","                        City       State  \n","0                      Delhi       Delhi  \n","1                  New Delhi       Delhi  \n","2     Greater Bengaluru Area   Karnataka  \n","3                   Gurugram     Haryana  \n","4            Mohali district  North West  \n","...                      ...         ...  \n","5582                   Kochi      Kerala  \n","5583                Gurugram     Haryana  \n","5584               Hyderabad   Telangana  \n","5585               Bengaluru   Karnataka  \n","5586               Bengaluru   Karnataka  \n","\n","[5587 rows x 15 columns]\n"]}],"source":["# print(\"Original DataFrame:\")\n","# print(df)\n","\n","# Check unique values in 'work_type' column\n","print(\"\\nUnique values in 'work_type' column:\")\n","print(df['work_type'].unique())\n","\n","# Define the mapping\n","mapping = {'Remote': 2, 'On-site': 1, 'Hybrid': 3}\n","\n","# Apply the mapping to the 'work_type' column and handle missing values\n","df['work_type'] = df['work_type'].map(mapping)\n","\n","# Print the modified DataFrame\n","print(\"\\nModified DataFrame with NaNs for unmapped values:\")\n","print(df)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":521,"status":"ok","timestamp":1717399198314,"user":{"displayName":"Vivian Kaun","userId":"17909774357863810829"},"user_tz":420},"id":"M2AaySNRvIjG","outputId":"90628764-314e-4b6d-dbdb-1184cf01732d"},"outputs":[{"name":"stdout","output_type":"stream","text":["[2 1 3]\n"]}],"source":["# #  only for numerical\n","# mapping = {'Remote': 2, 'On-site': 1, 'Hybrid':3}\n","# df['work_type'] = df['work_type'].map(mapping)\n","# # Get distinct values in the 'work_type' column\n","# print(df)\n","distinct_work_types = df['work_type'].unique()\n","\n","\n","print(distinct_work_types)\n","y = df.total_applicants\n","X = df.employees_count"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":112},"executionInfo":{"elapsed":298,"status":"ok","timestamp":1717399207758,"user":{"displayName":"Vivian Kaun","userId":"17909774357863810829"},"user_tz":420},"id":"kT8DQCAwvo3I","outputId":"d0822ada-b8df-44e9-9b68-d773d67c78c9"},"outputs":[{"data":{"application/vnd.google.colaboratory.intrinsic+json":{"summary":"{\n  \"name\": \"X\",\n  \"rows\": 5587,\n  \"fields\": [\n    {\n      \"column\": \"const\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.0,\n        \"min\": 1.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          1.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"employees_count\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3512,\n        \"min\": 1,\n        \"max\": 10001,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}","type":"dataframe","variable_name":"X"},"text/html":["\n","  <div id=\"df-e159623d-2189-4394-bf63-52cbd6c9f54b\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>const</th>\n","      <th>employees_count</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1.0</td>\n","      <td>1001</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1.0</td>\n","      <td>1001</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-e159623d-2189-4394-bf63-52cbd6c9f54b')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-e159623d-2189-4394-bf63-52cbd6c9f54b button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-e159623d-2189-4394-bf63-52cbd6c9f54b');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-f76ed720-b694-4317-8c56-c8d58012f4a9\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-f76ed720-b694-4317-8c56-c8d58012f4a9')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-f76ed720-b694-4317-8c56-c8d58012f4a9 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"text/plain":["   const  employees_count\n","0    1.0             1001\n","1    1.0             1001"]},"execution_count":68,"metadata":{},"output_type":"execute_result"}],"source":["X = sm.add_constant(X) # a constant (intercept) term  a\n","X.head(2)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":324,"status":"ok","timestamp":1717399871994,"user":{"displayName":"Vivian Kaun","userId":"17909774357863810829"},"user_tz":420},"id":"OeFDVjVQwiJk","outputId":"fbcffe1a-a738-4d62-8e04-612014621420"},"outputs":[{"name":"stdout","output_type":"stream","text":["                                 OLS Regression Results                                \n","=======================================================================================\n","Dep. Variable:       total_applicants   R-squared (uncentered):                   0.147\n","Model:                            OLS   Adj. R-squared (uncentered):              0.147\n","Method:                 Least Squares   F-statistic:                              963.9\n","Date:                Mon, 03 Jun 2024   Prob (F-statistic):                   2.24e-195\n","Time:                        07:31:11   Log-Likelihood:                         -30170.\n","No. Observations:                5587   AIC:                                  6.034e+04\n","Df Residuals:                    5586   BIC:                                  6.035e+04\n","Df Model:                           1                                                  \n","Covariance Type:            nonrobust                                                  \n","===================================================================================\n","                      coef    std err          t      P>|t|      [0.025      0.975]\n","-----------------------------------------------------------------------------------\n","employees_count     0.0054      0.000     31.047      0.000       0.005       0.006\n","==============================================================================\n","Omnibus:                     2411.735   Durbin-Watson:                   1.149\n","Prob(Omnibus):                  0.000   Jarque-Bera (JB):             9688.295\n","Skew:                           2.174   Prob(JB):                         0.00\n","Kurtosis:                       7.765   Cond. No.                         1.00\n","==============================================================================\n","\n","Notes:\n","[1] R² is computed without centering (uncentered) since the model does not contain a constant.\n","[2] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n"]}],"source":["\n","\n","#Linear Regression\n","# Assuming X is a dataframe or multidimensional array\n","X_flattened = X.values.flatten()\n","model1=  sm.OLS(endog = y , exog= X).fit()\n","print(model1.summary())"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":450},"executionInfo":{"elapsed":716,"status":"ok","timestamp":1717399856983,"user":{"displayName":"Vivian Kaun","userId":"17909774357863810829"},"user_tz":420},"id":"_ThdTq015nL9","outputId":"47073d01-4d86-4a74-ee87-87f607f1e7b2"},"outputs":[{"data":{"image/png":"\n","text/plain":["<Figure size 640x480 with 1 Axes>"]},"metadata":{},"output_type":"display_data"}],"source":["# Assuming X is a dataframe or multidimensional array\n","#X_values = X.values.flatten()\n","X= df.employees_count\n","plt.plot(X , y, 'o')  # blue\n","b, a = np.polyfit(X , y, 1)\n","plt.plot(X , b*X  + a)  # y replaced by equation\n","plt.xlabel(\"employees_count\")\n","plt.ylabel(\"total_applicants\")\n","plt.show()"]}],"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyOe4HJTxIbsda6tl1WP1Bv+"},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}